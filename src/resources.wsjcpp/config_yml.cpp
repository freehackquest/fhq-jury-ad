// automaticly generated by update_resources.py

#include <config_yml.h>

REGISTRY_WSJCPP_RESOURCE_FILE(RES_config_yml)

const std::string &RES_config_yml::getFilename() {
    static const std::string s = "config.yml";
    return s;
}

const std::string &RES_config_yml::getPackAs() {
    static const std::string s = "binary";
    return s;
}

const int RES_config_yml::getBufferSize() {
    return 2721;
}

const char *RES_config_yml::getBuffer() {
    static const std::string sRet =  // size: 2721
        "## Combined config for ctf01d\n"
        "# use 2 spaces for tab\n"
        "\n"
        "game:\n"
        "  id: \"test\" # uniq gameid must be regexp [a-z0-9]+\n"
        "  name: \"Test First Game\" # visible game name in scoreboard\n"
        "  start: \"2019-10-04 10:30:00\" # start time of game (UTC)\n"
        "  end: \"2030-09-06 13:00:00\" # end time of game (UTC)\n"
        "  coffee_break_start: \"2020-10-04 10:30:00\" # start time of game coffee break (UTC), but it will be ignored if period more (or less) then start and end\n"
        "  coffee_break_end: \"2021-01-04 10:30:00\" # end time of game coffee break (UTC), but it will be ignored if period more (or less) then start and end\n"
        "  flag_timelive_in_min: 1 # you can change flag time live (in minutes)\n"
        "  basic_costs_stolen_flag_in_points: 10 # basic costs stolen (attack) flag in points for adaptive scoreboard\n"
        "\n"
        "server:\n"
        "  # use storage which storage will be used, now possible values:\n"
        "  # mysql - use mysql database\n"
        "  # ram - (!not implemented yet) use just memory\n"
        "  # local - (!not implemented yet) use just memory\n"
        "  # postgres - (!not implemented yet) will be used postgre database\n"
        "  use_storage: mysql\n"
        "\n"
        "scoreboard:\n"
        "  port: 8080 # http port for scoreboard\n"
        "  htmlfolder: \"./html\" # web page for scoreboard see index-template.html\n"
        "  random: no # If yes - will be random values in scoreboard\n"
        "\n"
        "mysql_storage: # if server.use_storage is mysql\n"
        "  dbhost: \"localhost\"\n"
        "  dbport: 3306\n"
        "  dbname: \"fhqjuryad\"\n"
        "  dbuser: \"fhqjuryad\"\n"
        "  dbpass: \"fhqjuryad\"\n"
        "\n"
        "checkers:\n"
        "  - id: \"example_service1\" # work directory will be checker_example_service4\n"
        "    service_name: \"Service1\"\n"
        "    enabled: yes\n"
        "    script_path: \"./checker.py\"\n"
        "    script_wait_in_sec: 5 # max time for running script\n"
        "    time_sleep_between_run_scripts_in_sec: 15 # like a round for service\n"
        "  - id: \"example_service2\" # work directory will be checker_example_service4\n"
        "    service_name: \"Service2\"\n"
        "    enabled: yes\n"
        "    script_path: \"./checker.py\"\n"
        "    script_wait_in_sec: 5\n"
        "    time_sleep_between_run_scripts_in_sec: 15\n"
        "  - id: \"example_service3\" # work directory will be checker_example_service4\n"
        "    service_name: \"Service3\"\n"
        "    enabled: yes\n"
        "    script_path: \"./checker.py\"\n"
        "    script_wait_in_sec: 5\n"
        "    time_sleep_between_run_scripts_in_sec: 15\n"
        "  - id: \"example_service4\" # work directory will be checker_example_service4\n"
        "    service_name: \"Service4\"\n"
        "    enabled: yes\n"
        "    script_path: \"./checker.py\"\n"
        "    script_wait_in_sec: 5\n"
        "    time_sleep_between_run_scripts_in_sec: 15\n"
        "\n"
        "teams:\n"
        "  - id: \"another_some\" # must be uniq\n"
        "    name: \"Another Some\"\n"
        "    active: yes\n"
        "    logo: \"./html/images/teams/unknown.svg\"\n"
        "    ip_address: \"127.0.1.1\" # address to vulnserver\n"
        "  - id: \"so_some\" # must be uniq\n"
        "    name: \"So Some\"\n"
        "    active: yes\n"
        "    logo: \"./html/images/logo.png\"\n"
        "    ip_address: \"127.0.0.1\" # address to vulnserver\n"
        "\n"
        "    \n"
    ;
    return sRet.c_str();
} //::buffer() 

